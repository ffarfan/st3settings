{
    "comment": "GJS: JavaScript with Mozilla extensions",
    "fileTypes": [
        "js"
    ],
    "firstLineMatch": "^#!/usr/bin/gjs",
    "foldingStartMarker": "^.*\\bfunction\\s*(\\w+\\s*)?\\([^\\)]*\\)(\\s*\\{[^\\}]*)?\\s*$",
    "foldingStopMarker": "^\\s*\\}",
    "keyEquivalent": "^~J",
    "name": "JavaScript (GJS)",
    "patterns": [
        {
            "comment": "GJS shebang",
            "match": "^#!/usr/bin/gjs",
            "name": "comment.line.js"
        },
        {
            "captures": {
                "1": {
                    "name": "support.class.js"
                },
                "2": {
                    "name": "support.constant.js"
                },
                "3": {
                    "name": "keyword.operator.js"
                }
            },
            "comment": "match stuff like: Sound.prototype = { \u2026 } when extending an object",
            "match": "([a-zA-Z_?.$][\\w?.$]*)\\.(prototype)\\s*(=)\\s*",
            "name": "meta.class.js"
        },
        {
            "captures": {
                "1": {
                    "name": "support.class.js"
                },
                "2": {
                    "name": "support.constant.js"
                },
                "3": {
                    "name": "entity.name.function.js"
                },
                "4": {
                    "name": "keyword.operator.js"
                },
                "5": {
                    "name": "storage.type.function.js"
                },
                "6": {
                    "name": "punctuation.definition.parameters.begin.js"
                },
                "7": {
                    "name": "variable.parameter.function.js"
                },
                "8": {
                    "name": "punctuation.definition.parameters.end.js"
                }
            },
            "comment": "match stuff like: Sound.prototype.play = function() { \u2026 }",
            "match": "([a-zA-Z_?.$][\\w?.$]*)\\.(prototype)\\.([a-zA-Z_?.$][\\w?.$]*)\\s*(=)\\s*(function)?\\s*(\\()(.*?)(\\))",
            "name": "meta.function.prototype.js"
        },
        {
            "captures": {
                "1": {
                    "name": "support.class.js"
                },
                "2": {
                    "name": "support.constant.js"
                },
                "3": {
                    "name": "entity.name.function.js"
                },
                "4": {
                    "name": "keyword.operator.js"
                }
            },
            "comment": "match stuff like: Sound.prototype.play = myfunc",
            "match": "([a-zA-Z_?.$][\\w?.$]*)\\.(prototype)\\.([a-zA-Z_?.$][\\w?.$]*)\\s*(=)\\s*",
            "name": "meta.function.js"
        },
        {
            "captures": {
                "1": {
                    "name": "support.class.js"
                },
                "2": {
                    "name": "entity.name.function.js"
                },
                "3": {
                    "name": "keyword.operator.js"
                },
                "4": {
                    "name": "storage.type.function.js"
                },
                "5": {
                    "name": "punctuation.definition.parameters.begin.js"
                },
                "6": {
                    "name": "variable.parameter.function.js"
                },
                "7": {
                    "name": "punctuation.definition.parameters.end.js"
                }
            },
            "comment": "match stuff like: Sound.play = function() { \u2026 }",
            "match": "([a-zA-Z_?.$][\\w?.$]*)\\.([a-zA-Z_?.$][\\w?.$]*)\\s*(=)\\s*(function)\\s*(\\()(.*?)(\\))",
            "name": "meta.function.js"
        },
        {
            "captures": {
                "1": {
                    "name": "entity.name.function.js"
                },
                "2": {
                    "name": "keyword.operator.js"
                },
                "3": {
                    "name": "storage.type.function.js"
                },
                "4": {
                    "name": "punctuation.definition.parameters.begin.js"
                },
                "5": {
                    "name": "variable.parameter.function.js"
                },
                "6": {
                    "name": "punctuation.definition.parameters.end.js"
                }
            },
            "comment": "match stuff like: play = function() { \u2026 }",
            "match": "([a-zA-Z_?$][\\w?$]*)\\s*(=)\\s*(function)\\s*(\\()(.*?)(\\))",
            "name": "meta.function.js"
        },
        {
            "captures": {
                "1": {
                    "name": "storage.type.function.js"
                },
                "2": {
                    "name": "entity.name.function.js"
                },
                "3": {
                    "name": "punctuation.definition.parameters.begin.js"
                },
                "4": {
                    "name": "variable.parameter.function.js"
                },
                "5": {
                    "name": "punctuation.definition.parameters.end.js"
                }
            },
            "comment": "match regular function like: function myFunc(arg) { \u2026 }",
            "match": "\\b(function)\\s+([a-zA-Z_$]\\w*)?\\s*(\\()(.*?)(\\))",
            "name": "meta.function.js"
        },
        {
            "captures": {
                "1": {
                    "name": "entity.name.function.js"
                },
                "2": {
                    "name": "storage.type.function.js"
                },
                "3": {
                    "name": "punctuation.definition.parameters.begin.js"
                },
                "4": {
                    "name": "variable.parameter.function.js"
                },
                "5": {
                    "name": "punctuation.definition.parameters.end.js"
                }
            },
            "comment": "match stuff like: foobar: function() { \u2026 }",
            "match": "\\b([a-zA-Z_?.$][\\w?.$]*)\\s*:\\s*\\b(function)?\\s*(\\()(.*?)(\\))",
            "name": "meta.function.json.js"
        },
        {
            "captures": {
                "1": {
                    "name": "string.quoted.single.js"
                },
                "10": {
                    "name": "punctuation.definition.parameters.begin.js"
                },
                "11": {
                    "name": "variable.parameter.function.js"
                },
                "12": {
                    "name": "punctuation.definition.parameters.end.js"
                },
                "2": {
                    "name": "punctuation.definition.string.begin.js"
                },
                "3": {
                    "name": "entity.name.function.js"
                },
                "4": {
                    "name": "punctuation.definition.string.end.js"
                },
                "5": {
                    "name": "string.quoted.double.js"
                },
                "6": {
                    "name": "punctuation.definition.string.begin.js"
                },
                "7": {
                    "name": "entity.name.function.js"
                },
                "8": {
                    "name": "punctuation.definition.string.end.js"
                },
                "9": {
                    "name": "entity.name.function.js"
                }
            },
            "comment": "Attempt to match \"foo\": function",
            "match": "(?:((')([^']*)('))|((\")([^\"]*)(\")))\\s*:\\s*\\b(function)?\\s*(\\()([^)]*)(\\))",
            "name": "meta.function.json.js"
        },
        {
            "comment": "Attempt to match property getters and setters",
            "name": "meta.property.json.js",
            "match": "\\b([gs]et)\\s+([a-zA-Z_$]\\w*)?\\s*(\\()(.*?)(\\))",
            "captures": {
                "1": {
                    "name": "storage.type.property.js"
                },
                "2": {
                    "name": "entity.name.function.js"
                },
                "3": {
                    "name": "punctuation.definition.parameters.begin.js"
                },
                "4": {
                    "name": "variable.parameter.function.js"
                },
                "5": {
                    "name": "punctuation.definition.parameters.end.js"
                }
            }
        },
        {
            "captures": {
                "1": {
                    "name": "keyword.operator.text.js"
                },
                "2": {
                    "name": "entity.name.type.instance.js"
                }
            },
            "match": "(new)\\s+(\\w+(?:\\.\\w*)?)",
            "name": "meta.class.instance.constructor"
        },
        {
            "match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b",
            "name": "constant.numeric.js"
        },
        {
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.js"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.js"
                }
            },
            "name": "string.quoted.single.js",
            "patterns": [
                {
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                    "name": "constant.character.escape.js"
                }
            ]
        },
        {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.js"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.js"
                }
            },
            "name": "string.quoted.double.js",
            "patterns": [
                {
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
                    "name": "constant.character.escape.js"
                }
            ]
        },
        {
            "begin": "/\\*\\*(?!/)",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.js"
                }
            },
            "end": "\\*/",
            "name": "comment.block.documentation.js"
        },
        {
            "begin": "/\\*",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.js"
                }
            },
            "end": "\\*/",
            "name": "comment.block.js"
        },
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.js"
                }
            },
            "match": "(//).*$\\n?",
            "name": "comment.line.double-slash.js"
        },
        {
            "match": "\\b(boolean|byte|char|class|const|double|enum|float|function|int|interface|let|long|short|var|void)\\b",
            "name": "storage.type.js"
        },
        {
            "match": "\\b(export|extends|final|implements|native|private|protected|public|static|synchronized|throws|transient|volatile)\\b",
            "name": "storage.modifier.js"
        },
        {
            "match": "\\b(break|case|catch|continue|default|do|else|finally|for|goto|if|import|package|return|switch|throw|try|while)\\b",
            "name": "keyword.control.js"
        },
        {
            "match": "\\b(delete|in|instanceof|typeof|with)\\b",
            "name": "keyword.operator.text.js"
        },
        {
            "match": "\\btrue\\b",
            "name": "constant.language.boolean.true.js"
        },
        {
            "match": "\\bfalse\\b",
            "name": "constant.language.boolean.false.js"
        },
        {
            "match": "\\bnull\\b",
            "name": "constant.language.null.js"
        },
        {
            "match": "\\b(super|this)\\b",
            "name": "variable.language.js"
        },
        {
            "match": "\\b(Array(Buffer)?|Boolean|DataView|Date|(Eval|Internal|Range|Reference|Syntax|Type|URI)?Error|(Float(32|64)|(I|Ui)nt(8|16|32)|Uint8Clamped)Array|Function|Intl|Iterator|JSON|Math|Number|Object|ParallelArray|Proxy|RegExp|StopIteration|String|window)\\b",
            "name": "support.class.js"
        },
        {
            "match": "\\b((de|en)codeURI(Component)?|eval|is(Finite|NaN)|parse(Int|Float)|uneval)\\b",
            "name": "support.function.js"
        },
        {
            "match": "\\b(asin|anchor|acos|atan2?|apply|abs|big|bind|blink|bold|call|ceil|charAt|charCodeAt|compile|concat|contains|cos|create|definePropert(y|ies)|endsWith|every|exp|exec|filter|find|fixed|floor|fontcolor|fontsize|forEach|freeze|fromCharCode|get(OwnProperty(Descriptor|Names)|PrototypeOf|TimezoneOffset|(UTC)?Day)|hasOwnProperty|is(Array|Extensible|Frozen|Generator|Integer|PrototypeOf|Sealed)?|indexOf|italics|join|keys|lastIndexOf|link|localeCompare|log|map|min|match|max|now|pop|pow|push|parent|parse|preventExtensions|print(err)?|propertyIsEnumerable|quote|round|reduce|reduceRight|replace|reverse|random|seal|search|shift|sin|slice|small|some|sort|splice|split|sqrt|startsWith|strike|stringify|sub|substr|substring|sup|tan|test|to(DateString|Exponential|Fixed|Integer|ISOString|JSON|LocaleDateString|LocaleFormat|LocaleLowerCase|LocaleUpperCase|LocaleString|LocaleTimeString|LowerCase|Precision|String|Source|TimeString|UTCString|UpperCase)|trim|trimLeft|trimRight|unshift|unwatch|UTC|valueOf|watch|[sg]et(((UTC)?(Minutes|Milliseconds|Month|Seconds|Hours|Date|FullYear)|Time))|__(define[GS]etter|lookup[GS]etter|noSuchMethod|proto)__)\\b(?=\\s*\\()",
            "name": "support.function.method.js"
        },
        {
            "match": "\\b(imports|ARGV)\\b",
            "name": "support.constant.js"
        },
        {
            "match": "\\b(arguments|searchPath)\\b",
            "name": "support.variable.js"
        },
        {
            "match": "(?<=\\.)\\b(caller|constructor|EPSILON|global|ignoreCase|lastIndex|length|MAX_VALUE|MIN_VALUE|multiline|name|NaN|NEGATIVE_INFINITY|POSITIVE_INFINITY|source|sticky)\\b",
            "name": "support.variable.property.js"
        },
        {
            "match": "!|\\$|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|\\^=|\\b(in|instanceof|new|delete|typeof|void)\\b",
            "name": "keyword.operator.js"
        },
        {
            "match": "\\b(Infinity|NaN|undefined)\\b",
            "name": "constant.language.js"
        },
        {
            "begin": "(?<=[=(:]|^|return|&&|\\|\\||!)\\s*(/)(?![/*+{}?])",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.string.begin.js"
                }
            },
            "end": "(/)[igm]*",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.js"
                }
            },
            "name": "string.regexp.js",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.js"
                }
            ]
        },
        {
            "match": "\\;",
            "name": "punctuation.terminator.statement.js"
        },
        {
            "match": ",[ |\\t]*",
            "name": "meta.delimiter.object.comma.js"
        },
        {
            "match": "\\.",
            "name": "meta.delimiter.method.period.js"
        },
        {
            "match": "\\{|\\}",
            "name": "meta.brace.curly.js"
        },
        {
            "match": "\\(|\\)",
            "name": "meta.brace.round.js"
        },
        {
            "match": "\\[|\\]",
            "name": "meta.brace.square.js"
        }
    ],
    "scopeName": "source.js",
    "uuid": "93E017CC-6F27-11D9-90EB-000D93589AF6"
}